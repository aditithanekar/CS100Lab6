        -:    0:Source:/home/csmajs/athan014/lab-06---code-coverage-athan014-kchau047-3/src/Triangle.cpp
        -:    0:Graph:Triangle.cpp.gcno
        -:    0:Data:Triangle.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <math.h>
        -:    2:#include <assert.h>
        -:    3:#include "../lib/Triangle.h"
        -:    4:
        -:    5:
        -:    6:using shapes::Triangle;
        -:    7:
        -:    8:
       16:    9:Triangle::Triangle(int side1, int side2, int side3)
        -:   10:  : side1{side1},
        -:   11:    side2{side2},
       16:   12:    side3{side3} {
      16*:   13:  assert((side1 >= side2 && side1 >= side3) && "First side is not the longest");
      16*:   14:  assert(((side1 < side2 + side3) || (side2 < side3 + side1) || (side3 < side1 + side2))&& "Does not satisfy triangle inequality");
       16:   15:}
        -:   16:
        -:   17:
        -:   18:int
        6:   19:Triangle::getPerimeter() const {
        6:   20:  return side1 + side2 + side3;
        -:   21:}
        -:   22:
        -:   23:
        -:   24:double
        3:   25:Triangle::getArea() const {
        -:   26:  // Here we use Heron's formula to compute the area
        3:   27:  double halfPerimeter = getPerimeter() / 2.0;
        3:   28:  double radicand = halfPerimeter
        3:   29:                    * (halfPerimeter - side1)
        3:   30:                    * (halfPerimeter - side2)
        3:   31:                    * (halfPerimeter - side3);
        3:   32:  return sqrt(radicand);
        -:   33:}
        -:   34:
        -:   35:
        -:   36:bool
        6:   37:Triangle::isIsosceles() const {
        6:   38:  if(side1 == side2 && side2 == side3 && side1==side3)
        -:   39:  {
        2:   40:    return false;
        -:   41:  }
        4:   42:  return (side1 == side2 || side2 == side3 || side1 == side3);
        -:   43:}
        -:   44:
        -:   45:
        -:   46:bool
        5:   47:Triangle::isEquilateral() const {
        5:   48:  return side1 == side2 && side2 == side3 && side1==side3;
        -:   49:}
        -:   50:
        -:   51:
        -:   52:Triangle::Kind
        3:   53:Triangle::getKind() const {
        3:   54:  if (isIsosceles()) {
        1:   55:    return Kind::ISOSCELES;
        2:   56:  } else if (isEquilateral()) {
        1:   57:    return Kind::EQUILATERAL;
        -:   58:  } else {
        1:   59:    return Kind::SCALENE;
        -:   60:  }
        -:   61:}
